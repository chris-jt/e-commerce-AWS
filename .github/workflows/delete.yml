name: Delete EKS Cluster and Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_delete:
        description: 'Type "DELETE" to confirm the deletion of the entire infrastructure'
        required: true

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: e-commerce-cluster

jobs:
  delete-infrastructure:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_delete == 'DELETE'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Clean up resources
      run: |
        # Delete any ALBs and NLBs
        for lb in $(aws elbv2 describe-load-balancers --query 'LoadBalancers[*].LoadBalancerArn' --output text); do
          echo "Deleting load balancer $lb"
          aws elbv2 delete-load-balancer --load-balancer-arn $lb
        done

        # Delete any Classic ELBs
        for lb in $(aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output text); do
          echo "Deleting classic load balancer $lb"
          aws elb delete-load-balancer --load-balancer-name $lb
        done

        # Delete any NAT Gateways
        for nat in $(aws ec2 describe-nat-gateways --query 'NatGateways[*].NatGatewayId' --output text); do
          echo "Deleting NAT Gateway $nat"
          aws ec2 delete-nat-gateway --nat-gateway-id $nat
        done

        # Release any Elastic IPs
        for eip in $(aws ec2 describe-addresses --query 'Addresses[*].AllocationId' --output text); do
          echo "Releasing Elastic IP $eip"
          aws ec2 release-address --allocation-id $eip
        done

        # Delete any security groups (except default)
        for sg in $(aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text); do
          echo "Deleting security group $sg"
          aws ec2 delete-security-group --group-id $sg
        done

    - name: Delete EKS Cluster and VPC
      run: |
        # Get the list of nodegroups
        NODEGROUPS=$(aws eks list-nodegroups --cluster-name ${{ env.CLUSTER_NAME }} --query 'nodegroups[*]' --output text)

        # Delete each nodegroup
        for ng in $NODEGROUPS; do
          echo "Deleting nodegroup $ng"
          aws eks delete-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $ng
          aws eks wait nodegroup-deleted --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $ng
        done

        # Delete the EKS cluster
        echo "Deleting EKS cluster"
        aws eks delete-cluster --name ${{ env.CLUSTER_NAME }}

        # Wait for the cluster to be deleted
        echo "Waiting for cluster deletion"
        aws eks wait cluster-deleted --name ${{ env.CLUSTER_NAME }}

        # Delete the CloudFormation stack
        echo "Deleting CloudFormation stack"
        aws cloudformation delete-stack --stack-name ${{ env.CLUSTER_NAME }}

        # Wait for the stack to be deleted
        echo "Waiting for stack deletion"
        aws cloudformation wait stack-delete-complete --stack-name ${{ env.CLUSTER_NAME }}

    - name: Final cleanup
      run: |
        # Delete any leftover EBS volumes
        for vol in $(aws ec2 describe-volumes --filters Name=status,Values=available --query 'Volumes[*].VolumeId' --output text); do
          echo "Deleting EBS volume $vol"
          aws ec2 delete-volume --volume-id $vol
        done

        # Delete any VPC endpoints
        for vpc in $(aws ec2 describe-vpcs --query 'Vpcs[*].VpcId' --output text); do
          for endpoint in $(aws ec2 describe-vpc-endpoints --filters Name=vpc-id,Values=$vpc --query 'VpcEndpoints[*].VpcEndpointId' --output text); do
            echo "Deleting VPC endpoint $endpoint"
            aws ec2 delete-vpc-endpoints --vpc-endpoint-ids $endpoint
          done
        done

        # Delete any VPC peering connections
        for peering in $(aws ec2 describe-vpc-peering-connections --query 'VpcPeeringConnections[*].VpcPeeringConnectionId' --output text); do
          echo "Deleting VPC peering connection $peering"
          aws ec2 delete-vpc-peering-connection --vpc-peering-connection-id $peering
        done